// Code generated by protoc-gen-go.
// source: otis.proto
// DO NOT EDIT!

/*
Package otis is a generated protocol buffer package.

It is generated from these files:
	otis.proto

It has these top-level messages:
	Path
	PathChild
	Request
	Reply
	PingRequest
	PongReply
	PathRequest
	PathReply
	TimeSeriesRequest
	TimeSeriesReply
	TimeSeries
	KeyValues
	KeyValuePair
	Value
*/
package otis

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Type int32

const (
	Type_TYPE_DOUBLE   Type = 0
	Type_TYPE_FLOAT    Type = 1
	Type_TYPE_INT64    Type = 2
	Type_TYPE_UINT64   Type = 3
	Type_TYPE_INT32    Type = 4
	Type_TYPE_FIXED64  Type = 5
	Type_TYPE_FIXED32  Type = 6
	Type_TYPE_BOOL     Type = 7
	Type_TYPE_STRING   Type = 8
	Type_TYPE_BYTES    Type = 9
	Type_TYPE_UINT32   Type = 10
	Type_TYPE_ENUM     Type = 11
	Type_TYPE_SFIXED32 Type = 12
	Type_TYPE_SFIXED64 Type = 13
	Type_TYPE_SINT32   Type = 14
	Type_TYPE_SINT64   Type = 15
)

var Type_name = map[int32]string{
	0:  "TYPE_DOUBLE",
	1:  "TYPE_FLOAT",
	2:  "TYPE_INT64",
	3:  "TYPE_UINT64",
	4:  "TYPE_INT32",
	5:  "TYPE_FIXED64",
	6:  "TYPE_FIXED32",
	7:  "TYPE_BOOL",
	8:  "TYPE_STRING",
	9:  "TYPE_BYTES",
	10: "TYPE_UINT32",
	11: "TYPE_ENUM",
	12: "TYPE_SFIXED32",
	13: "TYPE_SFIXED64",
	14: "TYPE_SINT32",
	15: "TYPE_SINT64",
}
var Type_value = map[string]int32{
	"TYPE_DOUBLE":   0,
	"TYPE_FLOAT":    1,
	"TYPE_INT64":    2,
	"TYPE_UINT64":   3,
	"TYPE_INT32":    4,
	"TYPE_FIXED64":  5,
	"TYPE_FIXED32":  6,
	"TYPE_BOOL":     7,
	"TYPE_STRING":   8,
	"TYPE_BYTES":    9,
	"TYPE_UINT32":   10,
	"TYPE_ENUM":     11,
	"TYPE_SFIXED32": 12,
	"TYPE_SFIXED64": 13,
	"TYPE_SINT32":   14,
	"TYPE_SINT64":   15,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Path_PathType int32

const (
	Path_LEAF Path_PathType = 0
	Path_NODE Path_PathType = 1
)

var Path_PathType_name = map[int32]string{
	0: "LEAF",
	1: "NODE",
}
var Path_PathType_value = map[string]int32{
	"LEAF": 0,
	"NODE": 1,
}

func (x Path_PathType) String() string {
	return proto.EnumName(Path_PathType_name, int32(x))
}
func (Path_PathType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type PathChild_ChildType int32

const (
	PathChild_LEAF PathChild_ChildType = 0
	PathChild_NODE PathChild_ChildType = 1
)

var PathChild_ChildType_name = map[int32]string{
	0: "LEAF",
	1: "NODE",
}
var PathChild_ChildType_value = map[string]int32{
	"LEAF": 0,
	"NODE": 1,
}

func (x PathChild_ChildType) String() string {
	return proto.EnumName(PathChild_ChildType_name, int32(x))
}
func (PathChild_ChildType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type Path struct {
	Parts    []string      `protobuf:"bytes,1,rep,name=parts" json:"parts,omitempty"`
	Columns  []string      `protobuf:"bytes,2,rep,name=columns" json:"columns,omitempty"`
	Type     Path_PathType `protobuf:"varint,3,opt,name=type,enum=otis.Path_PathType" json:"type,omitempty"`
	Children []*PathChild  `protobuf:"bytes,4,rep,name=children" json:"children,omitempty"`
}

func (m *Path) Reset()                    { *m = Path{} }
func (m *Path) String() string            { return proto.CompactTextString(m) }
func (*Path) ProtoMessage()               {}
func (*Path) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Path) GetChildren() []*PathChild {
	if m != nil {
		return m.Children
	}
	return nil
}

type PathChild struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *PathChild) Reset()                    { *m = PathChild{} }
func (m *PathChild) String() string            { return proto.CompactTextString(m) }
func (*PathChild) ProtoMessage()               {}
func (*PathChild) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Request struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Priority uint32 `protobuf:"varint,2,opt,name=priority" json:"priority,omitempty"`
	Window   uint32 `protobuf:"varint,3,opt,name=window" json:"window,omitempty"`
	Content  []byte `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Mime     string `protobuf:"bytes,5,opt,name=mime" json:"mime,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Reply struct {
	Id      string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	More    bool   `protobuf:"varint,3,opt,name=more" json:"more,omitempty"`
	Seq     uint64 `protobuf:"varint,4,opt,name=seq" json:"seq,omitempty"`
	Content []byte `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	Mime    string `protobuf:"bytes,6,opt,name=mime" json:"mime,omitempty"`
}

func (m *Reply) Reset()                    { *m = Reply{} }
func (m *Reply) String() string            { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()               {}
func (*Reply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type PingRequest struct {
	Ping string `protobuf:"bytes,1,opt,name=ping" json:"ping,omitempty"`
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type PongReply struct {
	Pong string `protobuf:"bytes,1,opt,name=pong" json:"pong,omitempty"`
}

func (m *PongReply) Reset()                    { *m = PongReply{} }
func (m *PongReply) String() string            { return proto.CompactTextString(m) }
func (*PongReply) ProtoMessage()               {}
func (*PongReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type PathRequest struct {
	Paths    []*Path `protobuf:"bytes,1,rep,name=paths" json:"paths,omitempty"`
	Children bool    `protobuf:"varint,2,opt,name=children" json:"children,omitempty"`
}

func (m *PathRequest) Reset()                    { *m = PathRequest{} }
func (m *PathRequest) String() string            { return proto.CompactTextString(m) }
func (*PathRequest) ProtoMessage()               {}
func (*PathRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PathRequest) GetPaths() []*Path {
	if m != nil {
		return m.Paths
	}
	return nil
}

type PathReply struct {
	Paths []*Path `protobuf:"bytes,1,rep,name=paths" json:"paths,omitempty"`
}

func (m *PathReply) Reset()                    { *m = PathReply{} }
func (m *PathReply) String() string            { return proto.CompactTextString(m) }
func (*PathReply) ProtoMessage()               {}
func (*PathReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PathReply) GetPaths() []*Path {
	if m != nil {
		return m.Paths
	}
	return nil
}

type TimeSeriesRequest struct {
	Id      string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Offset  int32    `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	Limit   int32    `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	Paths   []*Path  `protobuf:"bytes,5,rep,name=paths" json:"paths,omitempty"`
	Columns []string `protobuf:"bytes,6,rep,name=columns" json:"columns,omitempty"`
}

func (m *TimeSeriesRequest) Reset()                    { *m = TimeSeriesRequest{} }
func (m *TimeSeriesRequest) String() string            { return proto.CompactTextString(m) }
func (*TimeSeriesRequest) ProtoMessage()               {}
func (*TimeSeriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *TimeSeriesRequest) GetPaths() []*Path {
	if m != nil {
		return m.Paths
	}
	return nil
}

type TimeSeriesReply struct {
	Id         string        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	TimeSeries []*TimeSeries `protobuf:"bytes,2,rep,name=time_series,json=timeSeries" json:"time_series,omitempty"`
	Paths      []*Path       `protobuf:"bytes,3,rep,name=paths" json:"paths,omitempty"`
}

func (m *TimeSeriesReply) Reset()                    { *m = TimeSeriesReply{} }
func (m *TimeSeriesReply) String() string            { return proto.CompactTextString(m) }
func (*TimeSeriesReply) ProtoMessage()               {}
func (*TimeSeriesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *TimeSeriesReply) GetTimeSeries() []*TimeSeries {
	if m != nil {
		return m.TimeSeries
	}
	return nil
}

func (m *TimeSeriesReply) GetPaths() []*Path {
	if m != nil {
		return m.Paths
	}
	return nil
}

type TimeSeries struct {
	Id       string               `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Version  string               `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Columns  []*TimeSeries_Column `protobuf:"bytes,3,rep,name=columns" json:"columns,omitempty"`
	Metadata *KeyValues           `protobuf:"bytes,4,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *TimeSeries) Reset()                    { *m = TimeSeries{} }
func (m *TimeSeries) String() string            { return proto.CompactTextString(m) }
func (*TimeSeries) ProtoMessage()               {}
func (*TimeSeries) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *TimeSeries) GetColumns() []*TimeSeries_Column {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *TimeSeries) GetMetadata() *KeyValues {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type TimeSeries_Column struct {
	Doubles   []float64 `protobuf:"fixed64,1,rep,packed,name=doubles" json:"doubles,omitempty"`
	Floats    []float32 `protobuf:"fixed32,2,rep,packed,name=floats" json:"floats,omitempty"`
	Int32S    []int32   `protobuf:"varint,3,rep,packed,name=int32s" json:"int32s,omitempty"`
	Int64S    []int64   `protobuf:"varint,4,rep,packed,name=int64s" json:"int64s,omitempty"`
	Uint32S   []uint32  `protobuf:"varint,5,rep,packed,name=uint32s" json:"uint32s,omitempty"`
	Uint64S   []uint64  `protobuf:"varint,6,rep,packed,name=uint64s" json:"uint64s,omitempty"`
	Sint32S   []int32   `protobuf:"zigzag32,7,rep,packed,name=sint32s" json:"sint32s,omitempty"`
	Sint64S   []int64   `protobuf:"zigzag64,8,rep,packed,name=sint64s" json:"sint64s,omitempty"`
	Fixed32S  []uint32  `protobuf:"fixed32,9,rep,packed,name=fixed32s" json:"fixed32s,omitempty"`
	Fixed64S  []uint64  `protobuf:"fixed64,10,rep,packed,name=fixed64s" json:"fixed64s,omitempty"`
	Sfixed32S []int32   `protobuf:"fixed32,11,rep,packed,name=sfixed32s" json:"sfixed32s,omitempty"`
	Sfixed64S []int64   `protobuf:"fixed64,12,rep,packed,name=sfixed64s" json:"sfixed64s,omitempty"`
	Bools     []bool    `protobuf:"varint,13,rep,packed,name=bools" json:"bools,omitempty"`
	Strings   []string  `protobuf:"bytes,14,rep,name=strings" json:"strings,omitempty"`
	RawBytes  [][]byte  `protobuf:"bytes,15,rep,name=raw_bytes,json=rawBytes,proto3" json:"raw_bytes,omitempty"`
	Type      Type      `protobuf:"varint,16,opt,name=type,enum=otis.Type" json:"type,omitempty"`
	Name      string    `protobuf:"bytes,17,opt,name=name" json:"name,omitempty"`
}

func (m *TimeSeries_Column) Reset()                    { *m = TimeSeries_Column{} }
func (m *TimeSeries_Column) String() string            { return proto.CompactTextString(m) }
func (*TimeSeries_Column) ProtoMessage()               {}
func (*TimeSeries_Column) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10, 0} }

type KeyValues struct {
	KeyValues []*KeyValuePair `protobuf:"bytes,1,rep,name=key_values,json=keyValues" json:"key_values,omitempty"`
}

func (m *KeyValues) Reset()                    { *m = KeyValues{} }
func (m *KeyValues) String() string            { return proto.CompactTextString(m) }
func (*KeyValues) ProtoMessage()               {}
func (*KeyValues) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *KeyValues) GetKeyValues() []*KeyValuePair {
	if m != nil {
		return m.KeyValues
	}
	return nil
}

type KeyValuePair struct {
	Key    string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Values *Value `protobuf:"bytes,2,opt,name=values" json:"values,omitempty"`
}

func (m *KeyValuePair) Reset()                    { *m = KeyValuePair{} }
func (m *KeyValuePair) String() string            { return proto.CompactTextString(m) }
func (*KeyValuePair) ProtoMessage()               {}
func (*KeyValuePair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *KeyValuePair) GetValues() *Value {
	if m != nil {
		return m.Values
	}
	return nil
}

type Value struct {
	Doubles   []float64 `protobuf:"fixed64,1,rep,packed,name=doubles" json:"doubles,omitempty"`
	Floats    []float32 `protobuf:"fixed32,2,rep,packed,name=floats" json:"floats,omitempty"`
	Int32S    []int32   `protobuf:"varint,3,rep,packed,name=int32s" json:"int32s,omitempty"`
	Int64S    []int64   `protobuf:"varint,4,rep,packed,name=int64s" json:"int64s,omitempty"`
	Uint32S   []uint32  `protobuf:"varint,5,rep,packed,name=uint32s" json:"uint32s,omitempty"`
	Uint64S   []uint64  `protobuf:"varint,6,rep,packed,name=uint64s" json:"uint64s,omitempty"`
	Sint32S   []int32   `protobuf:"zigzag32,7,rep,packed,name=sint32s" json:"sint32s,omitempty"`
	Sint64S   []int64   `protobuf:"zigzag64,8,rep,packed,name=sint64s" json:"sint64s,omitempty"`
	Fixed32S  []uint32  `protobuf:"fixed32,9,rep,packed,name=fixed32s" json:"fixed32s,omitempty"`
	Fixed64S  []uint64  `protobuf:"fixed64,10,rep,packed,name=fixed64s" json:"fixed64s,omitempty"`
	Sfixed32S []int32   `protobuf:"fixed32,11,rep,packed,name=sfixed32s" json:"sfixed32s,omitempty"`
	Sfixed64S []int64   `protobuf:"fixed64,12,rep,packed,name=sfixed64s" json:"sfixed64s,omitempty"`
	Bools     []bool    `protobuf:"varint,13,rep,packed,name=bools" json:"bools,omitempty"`
	Strings   []string  `protobuf:"bytes,14,rep,name=strings" json:"strings,omitempty"`
	RawBytes  [][]byte  `protobuf:"bytes,15,rep,name=raw_bytes,json=rawBytes,proto3" json:"raw_bytes,omitempty"`
	Type      Type      `protobuf:"varint,16,opt,name=type,enum=otis.Type" json:"type,omitempty"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func init() {
	proto.RegisterType((*Path)(nil), "otis.Path")
	proto.RegisterType((*PathChild)(nil), "otis.PathChild")
	proto.RegisterType((*Request)(nil), "otis.Request")
	proto.RegisterType((*Reply)(nil), "otis.Reply")
	proto.RegisterType((*PingRequest)(nil), "otis.PingRequest")
	proto.RegisterType((*PongReply)(nil), "otis.PongReply")
	proto.RegisterType((*PathRequest)(nil), "otis.PathRequest")
	proto.RegisterType((*PathReply)(nil), "otis.PathReply")
	proto.RegisterType((*TimeSeriesRequest)(nil), "otis.TimeSeriesRequest")
	proto.RegisterType((*TimeSeriesReply)(nil), "otis.TimeSeriesReply")
	proto.RegisterType((*TimeSeries)(nil), "otis.TimeSeries")
	proto.RegisterType((*TimeSeries_Column)(nil), "otis.TimeSeries.Column")
	proto.RegisterType((*KeyValues)(nil), "otis.KeyValues")
	proto.RegisterType((*KeyValuePair)(nil), "otis.KeyValuePair")
	proto.RegisterType((*Value)(nil), "otis.Value")
	proto.RegisterEnum("otis.Type", Type_name, Type_value)
	proto.RegisterEnum("otis.Path_PathType", Path_PathType_name, Path_PathType_value)
	proto.RegisterEnum("otis.PathChild_ChildType", PathChild_ChildType_name, PathChild_ChildType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for OtisRpc service

type OtisRpcClient interface {
	RPC(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
	RpcStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (OtisRpc_RpcStreamClient, error)
}

type otisRpcClient struct {
	cc *grpc.ClientConn
}

func NewOtisRpcClient(cc *grpc.ClientConn) OtisRpcClient {
	return &otisRpcClient{cc}
}

func (c *otisRpcClient) RPC(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := grpc.Invoke(ctx, "/otis.OtisRpc/RPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otisRpcClient) RpcStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (OtisRpc_RpcStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_OtisRpc_serviceDesc.Streams[0], c.cc, "/otis.OtisRpc/RpcStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &otisRpcRpcStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OtisRpc_RpcStreamClient interface {
	Recv() (*Reply, error)
	grpc.ClientStream
}

type otisRpcRpcStreamClient struct {
	grpc.ClientStream
}

func (x *otisRpcRpcStreamClient) Recv() (*Reply, error) {
	m := new(Reply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for OtisRpc service

type OtisRpcServer interface {
	RPC(context.Context, *Request) (*Reply, error)
	RpcStream(*Request, OtisRpc_RpcStreamServer) error
}

func RegisterOtisRpcServer(s *grpc.Server, srv OtisRpcServer) {
	s.RegisterService(&_OtisRpc_serviceDesc, srv)
}

func _OtisRpc_RPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtisRpcServer).RPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/otis.OtisRpc/RPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtisRpcServer).RPC(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtisRpc_RpcStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OtisRpcServer).RpcStream(m, &otisRpcRpcStreamServer{stream})
}

type OtisRpc_RpcStreamServer interface {
	Send(*Reply) error
	grpc.ServerStream
}

type otisRpcRpcStreamServer struct {
	grpc.ServerStream
}

func (x *otisRpcRpcStreamServer) Send(m *Reply) error {
	return x.ServerStream.SendMsg(m)
}

var _OtisRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "otis.OtisRpc",
	HandlerType: (*OtisRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RPC",
			Handler:    _OtisRpc_RPC_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RpcStream",
			Handler:       _OtisRpc_RpcStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("otis.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 999 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x56, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x5e, 0xc7, 0x76, 0x62, 0x1f, 0xe7, 0x67, 0x3a, 0xac, 0x16, 0xab, 0xa0, 0xc5, 0x6b, 0x2e,
	0x30, 0xac, 0xa8, 0x68, 0x1a, 0xe5, 0x12, 0xb1, 0x69, 0xb3, 0xa8, 0xda, 0xd2, 0x44, 0xd3, 0x14,
	0xd8, 0xab, 0xca, 0x6d, 0xa6, 0xe9, 0xa8, 0x89, 0x9d, 0xb5, 0x27, 0x2d, 0x11, 0x57, 0x3c, 0x00,
	0x77, 0x3c, 0x06, 0x57, 0xbc, 0x04, 0xaf, 0xc1, 0xa3, 0xa0, 0x99, 0xb1, 0xc7, 0xc9, 0xee, 0x16,
	0xae, 0x91, 0xb8, 0x69, 0xcf, 0x77, 0x7e, 0xbe, 0x73, 0xe6, 0x9c, 0x33, 0xe3, 0x00, 0xa4, 0x9c,
	0xe5, 0x7b, 0xcb, 0x2c, 0xe5, 0x29, 0xb6, 0x84, 0x1c, 0xfe, 0x6e, 0x80, 0x35, 0x8e, 0xf9, 0x0d,
	0x7e, 0x0c, 0xf6, 0x32, 0xce, 0x78, 0xee, 0x1b, 0x81, 0x19, 0xb9, 0x44, 0x01, 0xec, 0x43, 0xe3,
	0x2a, 0x9d, 0xaf, 0x16, 0x49, 0xee, 0xd7, 0xa4, 0xbe, 0x84, 0xf8, 0x33, 0xb0, 0xf8, 0x7a, 0x49,
	0x7d, 0x33, 0x30, 0xa2, 0x76, 0xf7, 0x83, 0x3d, 0xc9, 0x2c, 0x98, 0xe4, 0x9f, 0xc9, 0x7a, 0x49,
	0x89, 0x74, 0xc0, 0xcf, 0xc1, 0xb9, 0xba, 0x61, 0xf3, 0x69, 0x46, 0x13, 0xdf, 0x0a, 0xcc, 0xc8,
	0xeb, 0x76, 0x2a, 0xe7, 0x43, 0x61, 0x21, 0xda, 0x21, 0x7c, 0x0a, 0x4e, 0x19, 0x8e, 0x1d, 0xb0,
	0x4e, 0x86, 0x2f, 0x5e, 0xa2, 0x47, 0x42, 0x3a, 0x1d, 0x1d, 0x0d, 0x91, 0x11, 0x7e, 0x03, 0xae,
	0x0e, 0xc3, 0x18, 0xac, 0x65, 0xcc, 0x6f, 0x7c, 0x23, 0x30, 0x22, 0x97, 0x48, 0x39, 0xfc, 0x04,
	0x5c, 0x69, 0x7c, 0x90, 0xe1, 0x67, 0x68, 0x10, 0xfa, 0x66, 0x45, 0x73, 0x8e, 0xdb, 0x50, 0x63,
	0xd3, 0x22, 0xba, 0xc6, 0xa6, 0x78, 0x17, 0x9c, 0x65, 0xc6, 0xd2, 0x8c, 0xf1, 0xb5, 0x5f, 0x0b,
	0x8c, 0xa8, 0x45, 0x34, 0xc6, 0x4f, 0xa0, 0x7e, 0xcf, 0x92, 0x69, 0x7a, 0x2f, 0x0f, 0xdc, 0x22,
	0x05, 0x52, 0x0d, 0x4a, 0x38, 0x4d, 0xb8, 0x6f, 0x05, 0x46, 0xd4, 0x24, 0x25, 0x14, 0xd5, 0x2d,
	0xd8, 0x82, 0xfa, 0xb6, 0xaa, 0x4e, 0xc8, 0xe1, 0x2f, 0x06, 0xd8, 0x84, 0x2e, 0xe7, 0xeb, 0x77,
	0x72, 0x3f, 0x06, 0x9b, 0x66, 0x59, 0x9a, 0xc9, 0xc4, 0x2e, 0x51, 0x40, 0x72, 0xa4, 0x99, 0x6a,
	0xb2, 0x43, 0xa4, 0x8c, 0x11, 0x98, 0x39, 0x7d, 0x23, 0xb3, 0x59, 0x44, 0x88, 0x9b, 0x35, 0xd8,
	0xef, 0xaf, 0xa1, 0xbe, 0x51, 0xc3, 0x33, 0xf0, 0xc6, 0x2c, 0x99, 0x95, 0x4d, 0x10, 0x4d, 0x64,
	0xc9, 0x4c, 0x37, 0x91, 0x25, 0x33, 0xd1, 0xc4, 0x71, 0x2a, 0x5c, 0x44, 0xa5, 0xc2, 0x21, 0xdd,
	0x70, 0x48, 0x93, 0x59, 0xf8, 0x0a, 0x3c, 0x31, 0x86, 0x92, 0x23, 0x10, 0xbb, 0xc3, 0x6f, 0xd4,
	0xee, 0x78, 0x5d, 0xa8, 0xe6, 0x4b, 0x94, 0x41, 0xb4, 0x56, 0x2f, 0x41, 0x4d, 0x1e, 0xa6, 0x9a,
	0xf9, 0x97, 0x6a, 0xa6, 0x2a, 0xdb, 0xbf, 0x52, 0x85, 0xbf, 0x1a, 0xb0, 0x33, 0x61, 0x0b, 0x7a,
	0x46, 0x33, 0x46, 0xf3, 0x87, 0x66, 0xf9, 0x04, 0xea, 0xe9, 0xf5, 0x75, 0x4e, 0xb9, 0xec, 0x9d,
	0x4d, 0x0a, 0x24, 0xfa, 0x3c, 0x67, 0x0b, 0xa6, 0xa6, 0x65, 0x13, 0x05, 0xaa, 0xac, 0xf6, 0x43,
	0x07, 0xd8, 0xb8, 0x08, 0xf5, 0xad, 0x8b, 0x10, 0xde, 0x41, 0x67, 0xb3, 0x9c, 0xf7, 0x0d, 0x77,
	0x1f, 0x3c, 0xce, 0x16, 0xf4, 0x22, 0x97, 0x3e, 0xf2, 0x26, 0x79, 0x5d, 0xa4, 0x92, 0x6c, 0xc4,
	0x02, 0xd7, 0x72, 0x55, 0x91, 0xf9, 0x50, 0x1f, 0xfe, 0xb2, 0x00, 0xaa, 0xe0, 0x77, 0x72, 0xfa,
	0xd0, 0xb8, 0xa3, 0x59, 0xce, 0xd2, 0xa4, 0x58, 0xa9, 0x12, 0xe2, 0xfd, 0xea, 0x28, 0x8a, 0xfc,
	0xc3, 0xb7, 0x2b, 0xd9, 0x3b, 0x94, 0xf6, 0xea, 0xb2, 0x3f, 0x07, 0x67, 0x41, 0x79, 0x3c, 0x8d,
	0x79, 0x2c, 0x1b, 0xa7, 0xef, 0xf0, 0x2b, 0xba, 0xfe, 0x3e, 0x9e, 0xaf, 0x68, 0x4e, 0xb4, 0xc3,
	0xee, 0x9f, 0x26, 0xd4, 0x15, 0x81, 0x28, 0x62, 0x9a, 0xae, 0x2e, 0xe7, 0x54, 0xcd, 0xd3, 0x20,
	0x25, 0x14, 0xf3, 0xb9, 0x9e, 0xa7, 0x31, 0x57, 0xdd, 0xa8, 0x91, 0x02, 0x09, 0x3d, 0x4b, 0xf8,
	0x41, 0x57, 0xd5, 0x66, 0x93, 0x02, 0x15, 0xfa, 0x7e, 0x2f, 0x97, 0x6f, 0x88, 0x49, 0x0a, 0x24,
	0x32, 0xac, 0x8a, 0x00, 0x31, 0xbb, 0x16, 0x29, 0x61, 0x69, 0x11, 0x21, 0x62, 0x62, 0x16, 0x29,
	0xa1, 0xb0, 0xe4, 0x45, 0x4c, 0x23, 0x30, 0xa3, 0x1d, 0x52, 0xc2, 0xd2, 0x22, 0x62, 0x9c, 0xc0,
	0x8c, 0x30, 0x29, 0xa1, 0x58, 0xe0, 0x6b, 0xf6, 0x13, 0x9d, 0x8a, 0x20, 0x37, 0x30, 0xa3, 0x06,
	0xd1, 0x58, 0xdb, 0x44, 0x18, 0x04, 0x66, 0x54, 0x27, 0x1a, 0xe3, 0x8f, 0xc1, 0xcd, 0x75, 0xa0,
	0x17, 0x98, 0x51, 0x87, 0x54, 0x8a, 0xca, 0x2a, 0x42, 0x9b, 0x81, 0x19, 0x21, 0x52, 0x29, 0xc4,
	0xae, 0x5e, 0xa6, 0xe9, 0x3c, 0xf7, 0x5b, 0x81, 0x19, 0x39, 0x44, 0x01, 0x59, 0x23, 0xcf, 0x58,
	0x32, 0xcb, 0xfd, 0xb6, 0xda, 0xc4, 0x02, 0xe2, 0x8f, 0xc0, 0xcd, 0xe2, 0xfb, 0x8b, 0xcb, 0x35,
	0xa7, 0xb9, 0xdf, 0x09, 0xcc, 0xa8, 0x49, 0x9c, 0x2c, 0xbe, 0x1f, 0x08, 0x8c, 0x9f, 0x16, 0xef,
	0x35, 0x92, 0xef, 0x75, 0xb1, 0x4f, 0x1b, 0xcf, 0x34, 0x06, 0x2b, 0x89, 0x17, 0xd4, 0xdf, 0x51,
	0xd7, 0x5c, 0xc8, 0xe1, 0xd7, 0xe0, 0xea, 0x01, 0xe3, 0x7d, 0x80, 0x5b, 0xba, 0xbe, 0xb8, 0x93,
	0xa8, 0xb8, 0x9e, 0x78, 0x7b, 0x0b, 0xc6, 0x31, 0xcb, 0x88, 0x7b, 0x5b, 0x86, 0x84, 0x43, 0x68,
	0x6e, 0x9a, 0xc4, 0xd3, 0x75, 0x4b, 0xd7, 0xc5, 0x92, 0x0a, 0x11, 0x7f, 0x0a, 0xf5, 0x82, 0xb0,
	0x26, 0xd7, 0xca, 0x53, 0x84, 0x32, 0x84, 0x14, 0xa6, 0xf0, 0x0f, 0x13, 0x6c, 0xa9, 0xf9, 0x7f,
	0x9f, 0xfe, 0x33, 0xfb, 0xf4, 0xc5, 0x6f, 0x35, 0xb0, 0xe4, 0x47, 0xb8, 0x03, 0xde, 0xe4, 0xf5,
	0x78, 0x78, 0x71, 0x34, 0x3a, 0x1f, 0x9c, 0x0c, 0xd1, 0x23, 0xdc, 0x06, 0x90, 0x8a, 0x97, 0x27,
	0xa3, 0x17, 0x13, 0x64, 0x68, 0x7c, 0x7c, 0x3a, 0xe9, 0xf7, 0x50, 0x4d, 0x07, 0x9c, 0x2b, 0x85,
	0xb9, 0xe9, 0x70, 0xd0, 0x45, 0x16, 0x46, 0xd0, 0x54, 0x04, 0xc7, 0x3f, 0x0e, 0x8f, 0xfa, 0x3d,
	0x64, 0x6f, 0x6b, 0x0e, 0xba, 0xa8, 0x8e, 0x5b, 0xe0, 0x4a, 0xcd, 0x60, 0x34, 0x3a, 0x41, 0x0d,
	0xcd, 0x79, 0x36, 0x21, 0xc7, 0xa7, 0xdf, 0x22, 0x47, 0x73, 0x0e, 0x5e, 0x4f, 0x86, 0x67, 0xc8,
	0xdd, 0x4a, 0x7a, 0xd0, 0x45, 0xa0, 0x09, 0x86, 0xa7, 0xe7, 0xdf, 0x21, 0x0f, 0xef, 0x40, 0x4b,
	0x11, 0x94, 0x29, 0x9a, 0x6f, 0xa9, 0xfa, 0x3d, 0xd4, 0xaa, 0xd2, 0x28, 0x96, 0xf6, 0x96, 0xa2,
	0xdf, 0x43, 0x9d, 0xee, 0x0f, 0xd0, 0x18, 0x71, 0x96, 0x93, 0xe5, 0x15, 0x7e, 0x06, 0x26, 0x19,
	0x1f, 0xe2, 0x96, 0x6a, 0x5d, 0xf1, 0x21, 0xdb, 0xf5, 0x4a, 0x28, 0x3e, 0x24, 0x9f, 0x83, 0x4b,
	0x96, 0x57, 0x67, 0x3c, 0xa3, 0xf1, 0xe2, 0x9f, 0x1c, 0xbf, 0x32, 0x06, 0x08, 0xda, 0x69, 0x36,
	0xdb, 0xab, 0x7e, 0xe0, 0x5d, 0xd6, 0xe5, 0xbf, 0x83, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xad,
	0x92, 0xcd, 0x4e, 0xf5, 0x09, 0x00, 0x00,
}
